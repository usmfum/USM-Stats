{"version":3,"sources":["tokens.js","oracles.js","redux/actions.js","redux/interactions/cdp.js","redux/interactions/erc20.js","redux/interactions/oracles.js","redux/interactions.js","redux/selectors.js","utils.js","HealthCard.js","OracleCard.js","USMCard.js","FUMCard.js","App.js","redux/reducers.js","redux/configure.js","serviceWorker.js","index.js"],"names":["usm","name","abi","address","1","42","fum","usmView","oracle","chainlink","uniswapEthUsdc","uniswapEthUsdt","coingecko","median","networkLoaded","provider","type","fumLoaded","setLatestOraclePrice","source","price","setCollateral","collateral","setEthBuffer","ethBuffer","setUSMPrice","buyPrice","sellPrice","setFUMPrice","setTotalSupply","tokenName","supply","setMints","mints","setBurns","burns","loadCollateralData","dispatch","usmContract","usmViewContract","a","getCollateral","getDebtRatio","getEthBuffer","getUSMPrice","getFUMPrice","contract","ethPool","formattedCollateral","ethers","utils","formatEther","debtRatio","ratio","formattedRatio","formattedBuffer","usmPrice","formattedBuyPrice","formattedSellPrice","fumPrice","loadERC20Data","token","tokenContract","getTotalSupply","getTotalMints","getTotalBurns","erc20Contract","totalSupply","formattedSupply","mintFilter","filters","Transfer","constants","AddressZero","queryFilter","length","burnFilter","loadOracleData","getCoingeckoPrice","getNetwork","network","oracleAbi","oracleAddress","chainId","oracleContract","Contract","getChainlinkPrice","getUniswapEthUsdcPrice","getUniswapEthUsdtPrice","getMedianPrice","axios","get","then","response","data","ethereum","usd","catch","error","console","log","latestChainlinkPrice","formattedPrice","latestUniswapV3TWAPPrice1","latestUniswapV3TWAPPrice2","latestPrice","loadNetwork","providers","JsonRpcProvider","loadUSM","loadFUM","usmAbi","usmAddress","usmViewAbi","usmViewAddress","fumContract","networkProviderSelector","createSelector","state","w","metamaskSelector","metamaskSignerSelector","metamaskErrorSelector","metamaskUSMSelector","usmInputAmountSelector","fumInputAmountSelector","usmSupplySelector","usmMintsSelector","usmBurnsSelector","usmCollateralSelector","usmDebtRatioSelector","usmEthBufferSelector","usmBuyPriceSelector","usmSellPriceSelector","fumSupplySelector","fumMintsSelector","fumBurnsSelector","fumBuyPriceSelector","fumSellPriceSelector","chainlinkPriceSelector","uniswapEthUsdcPriceSelector","uniswapEthUsdtPriceSelector","coingeckoPriceSelector","medianPriceSelector","colours","colorisor","actualNumber","ranges","usmPriceHighlight","difference","Math","abs","Number","parseFloat","oracleHighlight","referencePrice","actualPrice","decimalPlaces","numberString","decimals","toFixed","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","toPercentage","decimalString","num","toString","stringMul","b","HealthCard","this","props","usmCollateral","usmCollateralUSD","usmDebtRatio","usmEthBuffer","usmEthBufferUSD","Card","Header","as","Body","Table","striped","hover","size","className","style","backgroundColor","Component","connect","coingeckoPrice","OracleCard","chainlinkPrice","uniswapEthUsdcPrice","uniswapEthUsdtPrice","medianPrice","colSpan","USMCard","usmSupply","usmMints","usmBurns","usmMarketCap","usmMarketCapUSD","usmBuyPrice","usmBuyPriceUSD","usmSellPrice","usmSellPriceUSD","metamaskSigner","metamaskConnected","metamaskUSM","inputAmount","printButtons","FUMCard","fumMarketCap","fumMarketCapUSD","fumSupply","fumMints","fumBurns","fumBuyPrice","fumBuyPriceUSD","fumSellPrice","fumSellPriceUSD","App","networkProvider","metamaskError","alert","Container","Alert","variant","href","target","rel","Row","Col","sm","md","rootReducer","combineReducers","app","action","metamask","signer","metamaskFUM","usmInputAmount","amount","fumInputAmount","loggerMiddleware","createLogger","middleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preLoadedState","Boolean","location","hostname","match","ReactDOM","render","store","createStore","applyMiddleware","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e6acc372.chunk.js","sourcesContent":["export const usm = {\n  name: 'usm',\n  abi: [\n    \"function mint(address to, uint minUsmOut) external payable returns (uint usmOut)\",\n    \"function burn(address payable to, uint usmToBurn, uint minEthOut) external returns (uint ethOut)\",\n    \"function fund(address to, uint minFumOut) external payable returns (uint fumOut)\",\n    \"function defund(address payable to, uint fumToBurn, uint minEthOut) external onlyAfterPrefund returns (uint ethOut)\",\n    \"function defundFrom(address from, address payable to, uint fumToBurn, uint minEthOut) external onlyAfterPrefund returns (uint ethOut)\",\n    \"function latestPrice() public virtual view returns (uint price)\",\n    \"function ethPool() public view returns (uint pool)\",\n    // \"function fumTotalSupply() public view returns (uint supply)\",\n    \"function bidAskAdjustment() public view returns (uint adjustment)\",\n    \"function timeSystemWentUnderwater() public view returns (uint timestamp)\",\n    \"function isDuringPrefund() public view returns (bool duringPrefund)\",\n\n    \"function receive() external payable\",\n\n    \"event UnderwaterStatusChanged(bool underwater)\",\n    \"event BidAskAdjustmentChanged(uint adjustment)\",\n    \"event PriceChanged(uint price, uint oraclePrice)\",\n  \n    \"function totalSupply() external view returns (uint256)\",\n    \"function balanceOf(address account) external view returns (uint256)\",\n    \"function transfer(address recipient, uint256 amount) external returns (bool)\",\n    \"function allowance(address owner, address spender) external view returns (uint256)\",\n    \"function approve(address spender, uint256 amount) external returns (bool)\",\n    \"function transferFrom(address sender, address recipient, uint256 amount) external returns (bool)\",\n    \"event Transfer(address indexed from, address indexed to, uint256 value)\",\n  ],\n  address: {\n    1: '0x2a7FFf44C19f39468064ab5e5c304De01D591675',\n    42: '0x21453979384f21D09534f8801467BDd5d90eCD6C'\n  }\n}\n\nexport const fum = {\n  name: 'fum',\n  abi: [\n    \"function totalSupply() external view returns (uint256)\",\n    \"event Transfer(address indexed from, address indexed to, uint256 value)\"\n  ],\n  address: {\n    1: '0x86729873e3b88DE2Ab85CA292D6d6D69D548eDF3',\n    42: '0x96F8F5323Aa6CB0e6F311bdE6DEEFb1c81Cb1898'\n  }\n}\n\nexport const usmView = {\n  name: 'usmView',\n  abi: [\n    \"function ethBuffer(bool roundUp) external view returns (int buffer)\",\n    \"function ethToUsm(uint ethAmount, bool roundUp) external view returns (uint usmOut)\",\n    \"function usmToEth(uint usmAmount, bool roundUp) external view returns (uint ethOut)\",\n    \"function debtRatio() external view returns (uint ratio)\",\n    \"function usmPrice(uint8 side) external view returns (uint price)\",\n    \"function fumPrice(uint8 side) external view returns (uint price)\",\n  ],\n  address: {\n    1: '0x0aEbFe42154dEaE7e35AFA9727469e7F4a192b9d',\n    42: ''\n  }\n}\n\nexport const oracle = {\n  name: 'oracle',\n  abi: [\n    \"function latestChainlinkPrice() public view returns (uint price)\",\n    \"function latestUniswapV3TWAPPrice1() public view returns (uint price)\",\n    \"function latestUniswapV3TWAPPrice2() public view returns (uint price)\",\n    \"function latestPrice() public virtual view returns (uint price)\"\n  ],\n  address: {\n    1: \"0x7F360C88CABdcC2F2874Ec4Eb05c3D47bD0726C5\",\n  }\n}\n","export const chainlink = \"chainlink\"\nexport const uniswapEthUsdc = \"uniswapEthUsdc\"\nexport const uniswapEthUsdt = \"uniswapEthUsdt\"\nexport const coingecko = \"coingecko\"\nexport const median = \"median\"\n","import { chainlink, coingecko, median, uniswapEthUsdc, uniswapEthUsdt } from \"../oracles\";\nimport { fum, usm, usmView } from \"../tokens\";\n\nexport function setInputAmount(token, amount) {\n  switch (token) {\n    case usm.name:\n      return {\n        type: 'SET_USM_INPUT_AMOUNT',\n        amount\n      }\n    case fum.name:\n      return {\n        type: 'SET_FUM_INPUT_AMOUNT',\n        amount\n      }\n    default:\n      break;\n  }\n  \n}\n\nexport function metamaskLoaded(metamask, signer, usm, fum) {\n  return {\n    type: 'METAMASK_LOADED',\n    metamask,\n    signer,\n    usm,\n    fum\n  }\n}\n\nexport function metamaskError(error) {\n  return {\n    type: 'METAMASK_ERROR',\n    error\n  }\n}\n\nexport function clearMetamaskError() {\n  return {\n    type: 'CLEAR_METAMASK_ERROR'\n  }\n}\n\nexport function networkLoaded(provider){\n  return {\n    type: 'NETWORK_LOADED',\n    provider\n  }\n}\n\nexport function usmLoaded(usm) {\n  return {\n    type: 'USM_LOADED',\n    usm\n  }\n}\n\nexport function fumLoaded(fum) {\n  return {\n    type: 'FUM_LOADED',\n    fum\n  }\n}\n\nexport function setLatestOraclePrice(source, price) {\n  switch (source) {\n    case chainlink:\n      return {\n        type: 'ORACLE_PRICE_CHAINLINK',\n        price\n      }\n    case uniswapEthUsdc:\n      return {\n        type: 'ORACLE_PRICE_UNISWAP_ETH_USDC',\n        price\n      }\n    case uniswapEthUsdt:\n      return {\n        type: 'ORACLE_PRICE_UNISWAP_ETH_USDT',\n        price\n      }\n    case coingecko:\n      return {\n        type: 'ORACLE_PRICE_COINGECKO',\n        price\n      }\n    case median:\n      return {\n        type: 'ORACLE_PRICE_MEDIAN',\n        price\n      }\n    default:\n      break;\n  }\n}\n\nexport function setCollateral(collateral) {\n  return {\n    type: 'USM_COLLATERAL',\n    collateral\n  }\n}\n\nexport function setDebtRatio(debtRatio) {\n  return {\n    type: 'USM_DEBT_RATIO',\n    debtRatio\n  }\n}\n\nexport function setEthBuffer(ethBuffer) {\n  return {\n    type: 'USM_ETH_BUFFER',\n    ethBuffer\n  }\n}\n\nexport function setUSMPrice(buyPrice, sellPrice) {\n  return {\n    type: 'USM_PRICE',\n    buyPrice,\n    sellPrice\n  }\n}\n\nexport function setFUMPrice(buyPrice, sellPrice) {\n  return {\n    type: 'FUM_PRICE',\n    buyPrice,\n    sellPrice\n  }\n}\n\nexport function setTotalSupply(tokenName, supply) {\n  switch (tokenName) {\n    case usm.name:\n      return {\n        type: 'USM_TOTAL_SUPPLY',\n        supply\n      }\n    case fum.name:\n      return {\n        type: 'FUM_TOTAL_SUPPLY',\n        supply\n      }\n    default:\n      break;\n  }\n}\n\nexport function setMints(tokenName, mints) {\n  switch (tokenName) {\n    case usm.name:\n      return {\n        type: 'USM_MINTS',\n        mints\n      }\n    case fum.name:\n      return {\n        type: 'FUM_MINTS',\n        mints\n      }\n    default:\n      break;\n  }\n}\n\nexport function setBurns(tokenName, burns) {\n  switch (tokenName) {\n    case usm.name:\n      return {\n        type: 'USM_BURNS',\n        burns\n      }\n    case fum.name:\n      return {\n        type: 'FUM_BURNS',\n        burns\n      }\n    default:\n      break;\n  }\n}\n","import { ethers } from \"ethers\"\nimport { setCollateral, setDebtRatio, setEthBuffer, setFUMPrice, setUSMPrice } from \"../actions\"\n\nexport const loadCollateralData = async (dispatch, usmContract, usmViewContract) => {\n  getCollateral(dispatch, usmContract)\n  getDebtRatio(dispatch, usmViewContract)\n  getEthBuffer(dispatch, usmViewContract)\n  getUSMPrice(dispatch, usmViewContract)\n  getFUMPrice(dispatch, usmViewContract)\n}\n\nexport const getCollateral = async (dispatch, contract) => {\n  const collateral = await contract.ethPool()\n  const formattedCollateral = ethers.utils.formatEther(collateral)\n  dispatch(setCollateral(formattedCollateral))\n}\n\nexport const getDebtRatio = async (dispatch, contract) => {\n  const ratio = await contract.debtRatio()\n  const formattedRatio = ethers.utils.formatEther(ratio)\n  dispatch(setDebtRatio(formattedRatio))\n}\n\nexport const getEthBuffer = async (dispatch, contract) => {\n  const ethBuffer = await contract.ethBuffer(0)\n  const formattedBuffer = ethers.utils.formatEther(ethBuffer)\n  dispatch(setEthBuffer(formattedBuffer))\n}\n\nexport const getUSMPrice = async (dispatch, contract) => {\n  const buyPrice = await contract.usmPrice(0)\n  const formattedBuyPrice = ethers.utils.formatEther(buyPrice)\n  const sellPrice = await contract.usmPrice(1)\n  const formattedSellPrice = ethers.utils.formatEther(sellPrice)\n  dispatch(setUSMPrice(formattedBuyPrice, formattedSellPrice))\n}\n\nexport const getFUMPrice = async (dispatch, contract) => {\n  const buyPrice = await contract.fumPrice(0)\n  const formattedBuyPrice = ethers.utils.formatEther(buyPrice)\n  const sellPrice = await contract.fumPrice(1)\n  const formattedSellPrice = ethers.utils.formatEther(sellPrice)\n  dispatch(setFUMPrice(formattedBuyPrice, formattedSellPrice))\n}\n","import { ethers } from \"ethers\"\nimport { setBurns, setMints, setTotalSupply } from \"../actions\"\n\nexport const loadERC20Data = async (dispatch, token, tokenContract) => {\n  getTotalSupply(dispatch, token, tokenContract)\n  getTotalMints(dispatch, token, tokenContract)\n  getTotalBurns(dispatch, token, tokenContract)\n}\n\nexport const getTotalSupply = async (dispatch, token, erc20Contract) => {\n  const supply = await erc20Contract.totalSupply()\n  const formattedSupply = ethers.utils.formatEther(supply)\n  dispatch(setTotalSupply(token.name, formattedSupply))\n}\n\nexport const getTotalMints = async (dispatch, token, erc20Contract) => {\n  const mintFilter = erc20Contract.filters.Transfer(ethers.constants.AddressZero, null)\n  const mints = await erc20Contract.queryFilter(mintFilter, 0)\n  dispatch(setMints(token.name, mints.length))\n}\n\nexport const getTotalBurns = async (dispatch, token, erc20Contract) => {\n  const burnFilter = erc20Contract.filters.Transfer(null, ethers.constants.AddressZero)\n  const burns = await erc20Contract.queryFilter(burnFilter, 0)\n  dispatch(setBurns(token.name, burns.length))\n}\n","import { ethers } from \"ethers\"\nimport { chainlink, coingecko, median, uniswapEthUsdc, uniswapEthUsdt } from \"../../oracles\"\nimport { setLatestOraclePrice } from \"../actions\"\nimport axios from 'axios'\nimport { oracle } from \"../../tokens\"\n\nexport const loadOracleData = async (dispatch, provider) => {\n  getCoingeckoPrice(dispatch)\n  const network = await provider.getNetwork()\n  const oracleAbi = oracle.abi\n  const oracleAddress = oracle.address[network.chainId]\n  const oracleContract = new ethers.Contract(oracleAddress, oracleAbi, provider)\n  getChainlinkPrice(dispatch, oracleContract)\n  getUniswapEthUsdcPrice(dispatch, oracleContract)\n  getUniswapEthUsdtPrice(dispatch, oracleContract)\n  getMedianPrice(dispatch, oracleContract)\n}\n\nexport const getCoingeckoPrice = async (dispatch) => {\n  axios.get('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd')\n    .then(function (response) {\n      dispatch(setLatestOraclePrice(coingecko, response.data.ethereum.usd))\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n}\n\nexport const getChainlinkPrice = async (dispatch, contract) => {\n  const price = await contract.latestChainlinkPrice()\n  const formattedPrice = ethers.utils.formatEther(price)\n  dispatch(setLatestOraclePrice(chainlink, formattedPrice))\n}\n\nexport const getUniswapEthUsdcPrice = async (dispatch, contract) => {\n  const price = await contract.latestUniswapV3TWAPPrice1()\n  const formattedPrice = ethers.utils.formatEther(price)\n  dispatch(setLatestOraclePrice(uniswapEthUsdc, formattedPrice))\n}\n\nexport const getUniswapEthUsdtPrice = async (dispatch, contract) => {\n  const price = await contract.latestUniswapV3TWAPPrice2()\n  const formattedPrice = ethers.utils.formatEther(price)\n  dispatch(setLatestOraclePrice(uniswapEthUsdt, formattedPrice))\n}\n\nexport const getMedianPrice = async (dispatch, contract) => {\n  const price = await contract.latestPrice()\n  const formattedPrice = ethers.utils.formatEther(price)\n  dispatch(setLatestOraclePrice(median, formattedPrice))\n}\n","import { ethers } from \"ethers\"\nimport { fum, usm, usmView } from \"../tokens\"\nimport { fumLoaded, metamaskError, metamaskLoaded, networkLoaded, usmLoaded } from \"./actions\"\nimport { loadCollateralData } from \"./interactions/cdp\"\nimport { loadERC20Data } from \"./interactions/erc20\"\nimport { loadOracleData } from \"./interactions/oracles\"\n\nexport const loadNetwork = async (dispatch) => {\n  const provider = new ethers.providers.JsonRpcProvider(\"https://mainnet.infura.io/v3/1be1f8b7b85a47e4949bc1057660a81d\")\n  dispatch(networkLoaded(provider))\n  loadUSM(dispatch, provider)\n  loadFUM(dispatch, provider)\n}\n\nexport const loadUSM = async (dispatch, provider) => {\n  const network = await provider.getNetwork()\n  const usmAbi = usm.abi\n  const usmAddress = usm.address[network.chainId]\n  const usmContract = new ethers.Contract(usmAddress, usmAbi, provider)\n  const usmViewAbi = usmView.abi\n  const usmViewAddress = usmView.address[network.chainId]\n  const usmViewContract = new ethers.Contract(usmViewAddress, usmViewAbi, provider)\n  dispatch(usmLoaded(usmContract))\n  loadERC20Data(dispatch, usm, usmContract)\n  loadCollateralData(dispatch, usmContract, usmViewContract)\n  loadOracleData(dispatch, provider)\n}\n\nexport const loadFUM = async (dispatch, provider) => {\n  const network = await provider.getNetwork()\n  const abi = fum.abi\n  const address = fum.address[network.chainId]\n  const fumContract = new ethers.Contract(address, abi, provider)\n  dispatch(fumLoaded(fumContract))\n  loadERC20Data(dispatch, fum, fumContract)\n}\n\nexport const loadMetamask = async (dispatch) => {\n  try {\n    await window.ethereum.enable()\n    const provider = await new ethers.providers.Web3Provider(window.ethereum)\n    const signer = await provider.getSigner()\n    const network = await provider.getNetwork()\n\n    if (network.chainId != 1) {\n      throw new Error(\"Must be on mainnet. Please alter Metamask network and refresh the page.\")\n    }\n\n    //load USM with Metamask\n    const usmAbi = usm.abi\n    const usmAddress = usm.address[network.chainId]\n    const usmContract = new ethers.Contract(usmAddress, usmAbi, signer)\n    //load FUM with Metamask\n    const fumAbi = fum.abi\n    const fumAddress = fum.address[network.chainId]\n    const fumContract = new ethers.Contract(fumAddress, fumAbi, signer)\n    dispatch(metamaskLoaded(provider, signer, usmContract, fumContract))\n  }\n  catch (e) {\n    dispatch(metamaskError(e))\n    return (false, false)\n  }\n}\n\nexport const buyUSM = async (dispatch, usm, signer, amount) => {\n  const weiAmount = ethers.utils.parseEther(amount)\n  const address = await signer.getAddress()\n  usm.mint(address, 0, {value: weiAmount})\n    .then(() => console.log(\"minting USM\"))\n    .catch((error) => dispatch(metamaskError(error)))\n}\n\nexport const sellUSM = async (dispatch, usm, signer, amount) => {\n  const weiAmount = ethers.utils.parseEther(amount)\n  const address = await signer.getAddress()\n  usm.burn(address, address, weiAmount, 0)\n    .then(() => console.log(\"burning USM\"))\n    .catch((error) => dispatch(metamaskError(error)))\n}\n\nexport const buyFUM = async (dispatch, usm, signer, amount) => {\n  console.log(usm, signer, amount)\n  const weiAmount = ethers.utils.parseEther(amount)\n  const address = await signer.getAddress()\n  usm.fund(address, 0, {value: weiAmount})\n    .then(() => console.log(\"minting FUM\"))\n    .catch((error) => dispatch(metamaskError(error)))\n}\n\nexport const sellFUM = async (dispatch, usm, signer, amount) => {\n  const weiAmount = ethers.utils.parseEther(amount)\n  const address = await signer.getAddress()\n  usm.defund(address, address, weiAmount, 0)\n    .then(() => console.log(\"burning FUM\"))\n    .catch((error) => dispatch(metamaskError(error)))\n}\n","import {get} from 'lodash';\nimport {createSelector} from 'reselect';\n\n//APP\nconst networkProvider = state => get(state, 'app.provider', null);\nexport const networkProviderSelector = createSelector(networkProvider, w => w);\n\nconst usmContract = state => get(state, 'app.usm', null);\nexport const usmContractSelector = createSelector(usmContract, w => w);\n\nconst metamask = state => get(state, 'app.metamask', null);\nexport const metamaskSelector = createSelector(metamask, w => w);\n\nconst metamaskSigner = state => get(state, 'app.metamaskSigner', null);\nexport const metamaskSignerSelector = createSelector(metamaskSigner, w => w);\n\nconst metamaskError = state => get(state, 'app.metamaskError', null);\nexport const metamaskErrorSelector = createSelector(metamaskError, w => w);\n\nconst metamaskUSM = state => get(state, 'app.metamaskUSM', null);\nexport const metamaskUSMSelector = createSelector(metamaskUSM, w => w);\n\nconst metamaskFUM = state => get(state, 'app.metamaskFUM', null);\nexport const metamaskFUMSelector = createSelector(metamaskFUM, w => w);\n\nconst usmInputAmount = state => get(state, 'app.usmInputAmount', null);\nexport const usmInputAmountSelector = createSelector(usmInputAmount, w => w);\n\nconst fumInputAmount = state => get(state, 'app.fumInputAmount', null);\nexport const fumInputAmountSelector = createSelector(fumInputAmount, w => w);\n\n//USM\nconst usmSupply = state => get(state, 'usm.supply', 0);\nexport const usmSupplySelector = createSelector(usmSupply, w => w);\n\nconst usmMints = state => get(state, 'usm.mints', 0);\nexport const usmMintsSelector = createSelector(usmMints, w => w);\n\nconst usmBurns = state => get(state, 'usm.burns', 0);\nexport const usmBurnsSelector = createSelector(usmBurns, w => w);\n\nconst usmCollateral = state => get(state, 'usm.collateral', 0);\nexport const usmCollateralSelector = createSelector(usmCollateral, w => w);\n\nconst usmDebtRatio = state => get(state, 'usm.debtRatio', 0);\nexport const usmDebtRatioSelector = createSelector(usmDebtRatio, w => w);\n\nconst usmEthBuffer = state => get(state, 'usm.ethBuffer', 0);\nexport const usmEthBufferSelector = createSelector(usmEthBuffer, w => w);\n\nconst usmBuyPrice = state => get(state, 'usm.buyPrice', 0);\nexport const usmBuyPriceSelector = createSelector(usmBuyPrice, w => w);\n\nconst usmSellPrice = state => get(state, 'usm.sellPrice', 0);\nexport const usmSellPriceSelector = createSelector(usmSellPrice, w => w);\n\n//FUM\nconst fumSupply = state => get(state, 'fum.supply', 0);\nexport const fumSupplySelector = createSelector(fumSupply, w => w);\n\nconst fumMints = state => get(state, 'fum.mints', 0);\nexport const fumMintsSelector = createSelector(fumMints, w => w);\n\nconst fumBurns = state => get(state, 'fum.burns', 0);\nexport const fumBurnsSelector = createSelector(fumBurns, w => w);\n\nconst fumBuyPrice = state => get(state, 'fum.buyPrice', 0);\nexport const fumBuyPriceSelector = createSelector(fumBuyPrice, w => w);\n\nconst fumSellPrice = state => get(state, 'fum.sellPrice', 0);\nexport const fumSellPriceSelector = createSelector(fumSellPrice, w => w);\n\n//ORACLE\nconst chainlinkPrice = state => get(state, 'oracle.chainlinkPrice', 0);\nexport const chainlinkPriceSelector = createSelector(chainlinkPrice, w => w);\n\nconst uniswapEthUsdcPrice = state => get(state, 'oracle.uniswapEthUsdcPrice', 0);\nexport const uniswapEthUsdcPriceSelector = createSelector(uniswapEthUsdcPrice, w => w);\n\nconst uniswapEthUsdtPrice = state => get(state, 'oracle.uniswapEthUsdtPrice', 0);\nexport const uniswapEthUsdtPriceSelector = createSelector(uniswapEthUsdtPrice, w => w);\n\nconst coingeckoPrice = state => get(state, 'oracle.coingeckoPrice', 0);\nexport const coingeckoPriceSelector = createSelector(coingeckoPrice, w => w);\n\nconst medianPrice = state => get(state, 'oracle.medianPrice', 0);\nexport const medianPriceSelector = createSelector(medianPrice, w => w);\n","export const colours = [\n  '#00ff44',\n  '#aaff00',\n  '#fbff00',\n  '#ffe100',\n  '#ffc400',\n  '#ff9d00',\n  '#ff8400',\n  '#ff5900',\n  '#ff0000'\n]\n\nexport const colorisor = (actualNumber, ranges) => {\n  if (actualNumber <= ranges[0]) {\n    return colours[0]\n  }\n  else if (actualNumber > ranges[0] && actualNumber <= ranges[1]) {\n    return colours[1]\n  }\n  else if (actualNumber > ranges[1] && actualNumber <= ranges[2]) {\n    return colours[2]\n  }\n  else if (actualNumber > ranges[2] && actualNumber <= ranges[3]) {\n    return colours[3]\n  }\n  else if (actualNumber > ranges[3] && actualNumber <= ranges[4]) {\n    return colours[4]\n  }\n  else if (actualNumber > ranges[4] && actualNumber <= ranges[5]) {\n    return colours[5]\n  }\n  else if (actualNumber > ranges[5] && actualNumber <= ranges[6]) {\n    return colours[6]\n  }\n  else if (actualNumber > ranges[6] && actualNumber <= ranges[7]) {\n    return colours[7]\n  }\n  else if (actualNumber > ranges[7]) {\n    return colours[8]\n  }\n}\n\nexport const usmPriceHighlight = (price) => {\n  const difference = Math.abs(1.00 - Number.parseFloat(price))\n  const ranges = [.01, .02, .03, .04, .05, .06, .07, .08]\n  return colorisor(difference, ranges)\n}\n\nexport const debtRatioHighlight = (debtRatio) => {\n  const ranges = [.5, .6, .65, .7, .725, .75, .775, .8]\n  return colorisor(debtRatio, ranges)\n}\n\nexport const oracleHighlight = (referencePrice, actualPrice) => {\n  const difference = Math.abs(Number.parseFloat(referencePrice) - Number.parseFloat(actualPrice))\n  const ranges = [2, 4, 6, 8, 10, 12, 14, 20]\n  return colorisor(difference, ranges)\n}\n\nexport const decimalPlaces = (numberString, decimals = 2) => {\n  return Number(\n    Number.parseFloat(numberString).toFixed(decimals)\n  ).toLocaleString(undefined, {minimumFractionDigits: decimals, maximumFractionDigits: decimals})\n}\n\nexport const toPercentage = (decimalString) => {\n  const num = Number.parseFloat(decimalString) * 100\n  return decimalPlaces(num.toString())\n}\n\nexport const stringMul = (a, b) => {\n  return (Number.parseFloat(a) * Number.parseFloat(b))\n}\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { coingeckoPriceSelector, usmCollateralSelector, usmDebtRatioSelector, usmEthBufferSelector } from './redux/selectors';\nimport { Button, Card, Table } from 'react-bootstrap';\nimport { debtRatioHighlight, decimalPlaces, toPercentage } from './utils';\n\nclass HealthCard extends Component {\n  render () {\n\n    const {usmCollateral, usmCollateralUSD, usmDebtRatio, usmEthBuffer, usmEthBufferUSD} = this.props;\n\n    return (\n      <Card>\n        <Card.Header as=\"h5\">\n          Protocol Health\n        </Card.Header>\n        <Card.Body>\n          <Table striped hover size=\"sm\">\n            <tbody>\n              <tr>\n                <td>Total Collateral</td>\n                <td>Ξ {decimalPlaces(usmCollateral)}</td>\n                <td>$ {decimalPlaces(usmCollateralUSD)}</td>\n              </tr>\n              <tr>\n                <td>Buffer</td>\n                <td>Ξ {decimalPlaces(usmEthBuffer)}</td>\n                <td>$ {decimalPlaces(usmEthBufferUSD)}</td>\n              </tr>\n              <tr className=\"text-dark\" style={{backgroundColor: debtRatioHighlight(usmDebtRatio)}}>\n                <td>Debt Ratio</td>\n                <td></td>\n                <td>{toPercentage(usmDebtRatio)} %</td>\n              </tr>                  \n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const coingeckoPrice = coingeckoPriceSelector(state)\n  const usmCollateral = usmCollateralSelector(state)\n  const usmCollateralUSD = usmCollateral * coingeckoPrice\n  const usmEthBuffer = usmEthBufferSelector(state)\n  const usmEthBufferUSD = usmEthBuffer * coingeckoPrice\n  return {\n    coingeckoPrice,\n    usmCollateral,\n    usmCollateralUSD,\n    usmEthBuffer,\n    usmEthBufferUSD,\n    usmDebtRatio: usmDebtRatioSelector(state),\n  }\n}\n\nexport default connect(mapStateToProps)(HealthCard);\n\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { chainlinkPriceSelector, medianPriceSelector, coingeckoPriceSelector, uniswapEthUsdcPriceSelector, uniswapEthUsdtPriceSelector } from './redux/selectors';\nimport { Card, Table } from 'react-bootstrap';\nimport { decimalPlaces, oracleHighlight } from './utils';\n\nclass OracleCard extends Component {\n  render() {\n\n    const {chainlinkPrice, uniswapEthUsdcPrice, uniswapEthUsdtPrice, coingeckoPrice, medianPrice} = this.props;\n\n    return (\n      <Card>\n        <Card.Header as=\"h5\">\n          Oracle Performance\n        </Card.Header>\n        <Card.Body>\n          \n          <Table striped hover size=\"sm\">\n            <tbody>\n              <tr>\n                <th colSpan={2}>Off Chain Reference (not used)</th>\n              </tr>\n              <tr>\n                <td>Coingecko - ETH</td>\n                <td>$ {decimalPlaces(coingeckoPrice)}</td>\n              </tr>\n              <tr>\n                <th colSpan={2}>USMFUM ETH Price</th>\n              </tr>\n              <tr className=\"text-dark\" style={{backgroundColor: oracleHighlight(coingeckoPrice, medianPrice)}}>\n                <td>Medianized Oracle</td>\n                <td>$ {decimalPlaces(medianPrice)}</td>\n              </tr>\n              <tr>\n                <th colSpan={2}>Median Sources</th>\n              </tr>\n              <tr className=\"text-dark\" style={{backgroundColor: oracleHighlight(coingeckoPrice, chainlinkPrice)}}>\n                <td>Chainlink</td>\n                <td>$ {decimalPlaces(chainlinkPrice)}</td>\n              </tr>\n              <tr className=\"text-dark\" style={{backgroundColor: oracleHighlight(coingeckoPrice, uniswapEthUsdcPrice)}}>\n                <td>Uniswap ETH/USDC TWAP</td>\n                <td>$ {decimalPlaces(uniswapEthUsdcPrice)}</td>\n              </tr>\n              <tr className=\"text-dark\" style={{backgroundColor: oracleHighlight(coingeckoPrice, uniswapEthUsdtPrice)}}>\n                <td>Uniswap ETH/USDT TWAP</td>\n                <td>$ {decimalPlaces(uniswapEthUsdtPrice)}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    coingeckoPrice: coingeckoPriceSelector(state),\n    chainlinkPrice: chainlinkPriceSelector(state),\n    uniswapEthUsdcPrice: uniswapEthUsdcPriceSelector(state),\n    uniswapEthUsdtPrice: uniswapEthUsdtPriceSelector(state),\n    medianPrice: medianPriceSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(OracleCard)\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { coingeckoPriceSelector, metamaskSelector, usmInputAmountSelector, metamaskSignerSelector, metamaskUSMSelector, usmBurnsSelector, usmBuyPriceSelector, usmMintsSelector, usmSellPriceSelector, usmSupplySelector } from './redux/selectors';\nimport { Card, Table } from 'react-bootstrap';\nimport { decimalPlaces, stringMul, usmPriceHighlight } from './utils';\nimport { buyUSM, loadMetamask, sellUSM } from './redux/interactions';\nimport { setInputAmount } from './redux/actions';\nimport { usm } from './tokens';\n\nfunction printButtons(metamaskConnected, buy, sell, connect, inputChange) {\n  // Removed until fixed\n\n  // if (metamaskConnected) {\n  //   return (\n  //     <>\n  //       <Button onClick={sell} variant=\"warning\" size=\"sm\" className=\"float-right ml-1\">Burn (USM)</Button>\n  //       <Button onClick={buy} variant=\"success\" size=\"sm\" className=\"float-right ml-1\">Mint (ETH)</Button>\n  //       <input className=\"form-control\" style={{width: 100}} onChange={inputChange} placeholder=\"Amount\" type=\"number\" size=\"sm\" className=\"float-right ml-1\"></input>\n  //     </>\n  //   )\n  // }\n  // else {\n  //   return (<Button onClick={connect} variant=\"success\" size=\"sm\" className=\"float-right ml-1\">Connect</Button>)\n  // }\n}\n\nclass USMCard extends Component {\n  render () {\n    const {dispatch, usmSupply, usmMints, usmBurns, usmMarketCap, usmMarketCapUSD,\n      usmBuyPrice, usmBuyPriceUSD, usmSellPrice, usmSellPriceUSD,\n      metamaskSigner, metamaskConnected, metamaskUSM, inputAmount\n    } = this.props\n\n    const connectMetamask = (e) => {\n      loadMetamask(dispatch)\n    }\n\n    const buyUsm = (e) => {\n      buyUSM(dispatch, metamaskUSM, metamaskSigner, inputAmount)\n    }\n\n    const setAmount = (e) => {\n      dispatch(setInputAmount(usm.name, e.target.value))\n    }\n\n    const sellUsm = (e) => {\n      sellUSM(dispatch, metamaskUSM, metamaskSigner, inputAmount)\n    }\n\n    return (\n      <Card>\n        <Card.Header as=\"h5\">\n          <span>USM</span>\n          {printButtons(metamaskConnected, buyUsm, sellUsm, connectMetamask, setAmount)}\n        </Card.Header>\n        <Card.Body>\n          \n          <Table striped hover size=\"sm\">\n            <tbody>\n              <tr>\n                <td>Market Cap</td>\n                <td>Ξ {decimalPlaces(usmMarketCap)}</td>\n                <td>$ {decimalPlaces(usmMarketCapUSD)}</td>\n              </tr>\n              <tr className=\"text-dark\" style={{backgroundColor: usmPriceHighlight(usmBuyPriceUSD)}}>\n                <td>Mint Price</td>\n                <td>Ξ {decimalPlaces(usmBuyPrice, 5)}</td>\n                <td>$ {decimalPlaces(usmBuyPriceUSD)}</td>\n              </tr>\n              <tr className=\"text-dark\" style={{backgroundColor: usmPriceHighlight(usmSellPriceUSD)}}>\n                <td>Burn Price</td>\n                <td>Ξ {decimalPlaces(usmSellPrice, 5)}</td>\n                <td>$ {decimalPlaces(usmSellPriceUSD)}</td>\n              </tr>\n              <tr>\n                <td>Total Supply</td>\n                <td>-</td>\n                <td>{decimalPlaces(usmSupply)}</td>\n              </tr>\n              <tr>\n                <td>No. of Mints</td>\n                <td>-</td>\n                <td>{usmMints}</td>\n              </tr>\n              <tr>\n                <td>No. of Burns</td>\n                <td>-</td>\n                <td>{usmBurns}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const coingeckoPrice = coingeckoPriceSelector(state)\n\n  const usmSupply = usmSupplySelector(state)\n  const usmBuyPrice = usmBuyPriceSelector(state)\n  const usmSellPrice = usmSellPriceSelector(state)\n  const usmMarketCap = usmSupply * usmBuyPrice\n  const usmBuyPriceUSD = stringMul(usmBuyPrice, coingeckoPrice)\n  const usmSellPriceUSD = stringMul(usmSellPrice, coingeckoPrice)\n  const usmMarketCapUSD = stringMul(usmMarketCap, coingeckoPrice)\n\n  const metamask = metamaskSelector(state)\n  const metamaskConnected = (metamask != null);\n  return {\n    inputAmount: usmInputAmountSelector(state),\n    usmMarketCap,\n    usmMarketCapUSD,\n    usmSupply,\n    usmMints: usmMintsSelector(state),\n    usmBurns: usmBurnsSelector(state),\n    usmBuyPrice,\n    usmBuyPriceUSD,\n    usmSellPrice,\n    usmSellPriceUSD,\n    metamaskConnected,\n    metamaskSigner: metamaskSignerSelector(state),\n    metamaskUSM: metamaskUSMSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(USMCard);\n\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { coingeckoPriceSelector, fumBurnsSelector, fumBuyPriceSelector, fumInputAmountSelector, fumMintsSelector, fumSellPriceSelector, fumSupplySelector, metamaskSelector, metamaskSignerSelector, metamaskUSMSelector } from './redux/selectors';\nimport { Card, Table } from 'react-bootstrap';\nimport { decimalPlaces, stringMul } from './utils';\nimport { buyFUM, loadMetamask, sellFUM } from './redux/interactions';\nimport { setInputAmount } from './redux/actions';\nimport { fum } from './tokens';\n\nfunction printButtons(metamaskConnected, buy, sell, connect, inputChange) {\n  // Removed until fixed\n\n  // if (metamaskConnected) {\n  //   return (\n  //     <>\n  //       <Button onClick={sell} variant=\"warning\" size=\"sm\" className=\"float-right ml-1\">Burn (FUM)</Button>\n  //       <Button onClick={buy} variant=\"success\" size=\"sm\" className=\"float-right ml-1\">Mint (ETH)</Button>\n  //       <input className=\"form-control\" style={{width: 100}} onChange={inputChange} placeholder=\"Amount\" type=\"number\" size=\"sm\" className=\"float-right ml-1\"></input>\n  //     </>\n  //   )\n  // }\n  // else {\n  //   return (<Button onClick={connect} variant=\"success\" size=\"sm\" className=\"float-right ml-1\">Connect</Button>)\n  // }\n}\n\nclass FUMCard extends Component {\n  render() {\n    const {\n      dispatch, fumMarketCap, fumMarketCapUSD, fumSupply, fumMints, fumBurns,\n      fumBuyPrice, fumBuyPriceUSD, fumSellPrice, fumSellPriceUSD,\n      metamaskSigner, metamaskConnected, metamaskUSM, inputAmount\n    } = this.props\n\n    const connectMetamask = (e) => {\n      loadMetamask(dispatch)\n    }\n\n    const buyFum = (e) => {\n      buyFUM(dispatch, metamaskUSM, metamaskSigner, inputAmount)\n    }\n\n    const setAmount = (e) => {\n      dispatch(setInputAmount(fum.name, e.target.value))\n    }\n\n    const sellFum = (e) => {\n      sellFUM(dispatch, metamaskUSM, metamaskSigner, inputAmount)\n    }\n\n    return (\n      <Card>\n        <Card.Header as=\"h5\">\n          FUM\n          {printButtons(metamaskConnected, buyFum, sellFum, connectMetamask, setAmount)}\n        </Card.Header>\n        <Card.Body>\n          <Table striped hover size=\"sm\">\n            <tbody>\n              <tr>\n                <td>Market Cap</td>\n                <td>Ξ {decimalPlaces(fumMarketCap)}</td>\n                <td>$ {decimalPlaces(fumMarketCapUSD)}</td>\n              </tr>\n              <tr>\n                <td>Mint Price</td>\n                <td>Ξ {decimalPlaces(fumBuyPrice, 5)}</td>\n                <td>$ {decimalPlaces(fumBuyPriceUSD)}</td>\n              </tr>\n              <tr>\n                <td>Burn Price</td>\n                <td>Ξ {decimalPlaces(fumSellPrice, 5)}</td>\n                <td>$ {decimalPlaces(fumSellPriceUSD)}</td>\n              </tr>\n              <tr>\n                <td>Total Supply</td>\n                <td>-</td>\n                <td>{decimalPlaces(fumSupply)}</td>\n              </tr>\n              <tr>\n                <td>No. of Mints</td>\n                <td>-</td>\n                <td>{fumMints}</td>\n              </tr>\n              <tr>\n                <td>No. of Burns</td>\n                <td>-</td>\n                <td>{fumBurns}</td>\n              </tr>\n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const coingeckoPrice = coingeckoPriceSelector(state)\n\n  const fumSupply = fumSupplySelector(state)\n  const fumBuyPrice = fumBuyPriceSelector(state)\n  const fumSellPrice = fumSellPriceSelector(state)\n  const fumMarketCap = fumSupply * fumBuyPrice\n\n  const fumBuyPriceUSD = stringMul(fumBuyPrice, coingeckoPrice)\n  const fumSellPriceUSD = stringMul(fumSellPrice, coingeckoPrice)\n  const fumMarketCapUSD = stringMul(fumMarketCap, coingeckoPrice)\n\n  const metamask = metamaskSelector(state)\n  const metamaskConnected = (metamask != null);\n  return {\n    inputAmount: fumInputAmountSelector(state),\n    fumMarketCap,\n    fumMarketCapUSD,\n    fumSupply,\n    fumMints: fumMintsSelector(state),\n    fumBurns: fumBurnsSelector(state),\n    fumBuyPrice,\n    fumBuyPriceUSD,\n    fumSellPrice,\n    fumSellPriceUSD,\n    coingeckoPrice,\n    metamaskConnected,\n    metamaskSigner: metamaskSignerSelector(state),\n    metamaskUSM: metamaskUSMSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(FUMCard);\n","import './App.scss';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { loadNetwork } from './redux/interactions';\nimport { metamaskErrorSelector, networkProviderSelector } from './redux/selectors';\nimport { Col, Container, Row, Alert } from 'react-bootstrap';\nimport HealthCard from './HealthCard';\nimport OracleCard from './OracleCard';\nimport USMCard from './USMCard';\nimport FUMCard from './FUMCard';\nimport { clearMetamaskError } from './redux/actions';\n\nclass App extends Component {\n\n  render() {\n\n    const {dispatch, networkProvider, metamaskError } = this.props;\n\n    if (!networkProvider) {\n      loadNetwork(dispatch);\n    }\n\n    if (metamaskError) {\n      alert(metamaskError.toString())\n      dispatch(clearMetamaskError())\n    }\n\n    return (\n      <div className=\"App\">\n        <Container>\n          <Alert variant=\"success\">\n            <b><a href=\"https://twitter.com/usmfum/status/1447437647727763456\" target=\"_blank\" rel=\"noreferrer\">USM v1-rc1</a> is now live on mainnet!</b>\n            But please exercise caution, this is still a fresh release, not yet battle-tested.\n          </Alert>\n          <Row>\n            <Col sm=\"12\" md=\"6\">\n              <HealthCard />\n            </Col>\n            <Col sm=\"12\" md=\"6\">\n              <OracleCard />\n            </Col>\n          </Row>\n          <Row>\n            <Col sm=\"12\" md=\"6\">\n              <USMCard />\n            </Col>\n            <Col sm=\"12\" md=\"6\">\n              <FUMCard />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    networkProvider: networkProviderSelector(state),\n    metamaskError: metamaskErrorSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","import {combineReducers} from 'redux';\n\nfunction app(state = {}, action) {\n  switch (action.type) {\n    case 'NETWORK_LOADED':\n      return { ...state, provider: action.provider }\n    case 'USM_LOADED':\n      return { ...state, usm: action.usm }\n    case 'FUM_LOADED':\n      return { ...state, fum: action.fum }\n    case 'METAMASK_LOADED':\n      return { \n        ...state,\n        metamask: action.metamask,\n        metamaskSigner: action.signer,\n        metamaskUSM: action.usm,\n        metamaskFUM: action.fum\n      }\n    case 'METAMASK_ERROR':\n      return { ...state, metamaskError: action.error }\n    case 'CLEAR_METAMASK_ERROR':\n      return { ...state, metamaskError: null }\n    case 'SET_USM_INPUT_AMOUNT':\n      return { ...state, usmInputAmount: action.amount }\n    case 'SET_FUM_INPUT_AMOUNT':\n      return { ...state, fumInputAmount: action.amount }\n    default:\n      return state;\n  }\n}\n\nfunction usm(state = {}, action) {\n  switch (action.type) {\n    case 'USM_TOTAL_SUPPLY':\n      return { ...state, supply: action.supply }\n    case 'USM_MINTS':\n      return { ...state, mints: action.mints }\n    case 'USM_BURNS':\n      return { ...state, burns: action.burns }\n    case 'USM_COLLATERAL':\n      return { ...state, collateral: action.collateral }\n    case 'USM_DEBT_RATIO':\n      return { ...state, debtRatio: action.debtRatio }\n    case 'USM_ETH_BUFFER':\n      return { ...state, ethBuffer: action.ethBuffer }\n    case 'USM_PRICE':\n      return { ...state, buyPrice: action.buyPrice, sellPrice: action.sellPrice }\n    default:\n      return state;\n  }\n}\n\nfunction fum(state = {}, action) {\n  switch (action.type) {\n    case 'FUM_TOTAL_SUPPLY':\n      return { ...state, supply: action.supply }\n    case 'FUM_MINTS':\n      return { ...state, mints: action.mints }\n    case 'FUM_BURNS':\n      return { ...state, burns: action.burns }\n    case 'FUM_PRICE':\n      return { ...state, buyPrice: action.buyPrice, sellPrice: action.sellPrice }\n    default:\n      return state;\n  }\n}\n\nfunction oracle(state = {}, action) {\n  switch (action.type) {\n    case 'ORACLE_PRICE_CHAINLINK':\n      return { ...state, chainlinkPrice: action.price }\n    case 'ORACLE_PRICE_UNISWAP_ETH_USDC':\n      return { ...state, uniswapEthUsdcPrice: action.price }\n    case 'ORACLE_PRICE_UNISWAP_ETH_USDT':\n      return { ...state, uniswapEthUsdtPrice: action.price }\n    case 'ORACLE_PRICE_COINGECKO':\n      return { ...state, coingeckoPrice: action.price }\n    case 'ORACLE_PRICE_MEDIAN':\n      return { ...state, medianPrice: action.price }\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = new combineReducers({\n  app, usm, fum, oracle\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { createLogger }  from \"redux-logger\";\nimport rootReducer from \"./reducers\";\n\nconst loggerMiddleware = createLogger();\nconst middleware = [];\n\n//connects redux browser to app\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default function configureStore(preLoadedState){\n  return createStore(\n    rootReducer, \n    preLoadedState,\n    composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport configureStore from './redux/configure';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}